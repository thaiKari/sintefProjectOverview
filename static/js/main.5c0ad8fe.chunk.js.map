{"version":3,"sources":["data/data.ts","InfoBox.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["data","Name","Id","Samples","Assignments","useStyles","makeStyles","root","minWidth","position","right","top","zIndex","InfoBox","classes","Card","className","CardContent","Typography","variant","component","color","swapLatLn","coords","length","map","getCoordinates","countryFeature","countries","find","f","App","purpleOptions","fillColor","useState","processedData","setprocessedData","selected","setselected","useEffect","feature","coordinates","MapContainer","style","width","height","center","zoom","TileLayer","id","attribution","url","process","Polygon","pathOptions","positions","eventHandlers","mouseover","mouseout","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mzi4oBAQaA,EAAe,CAC1B,CACEC,KAAM,2BACNC,GAAI,MACJC,QAAS,GACTC,YAAa,GAEf,CACEH,KAAM,SACNC,GAAI,MACJC,QAAS,IACTC,YAAa,IAEf,CACEH,KAAM,WACNC,GAAI,MACJC,QAAS,EACTC,YAAa,GAEf,CACEH,KAAM,QACNC,GAAI,MACJC,QAAS,GACTC,YAAa,I,+CCzBXC,EAAYC,YAAW,CACzBC,KAAM,CACJC,SAAU,IACVC,SAAU,WACVC,MAAO,GACPC,IAAI,GACJC,OAAO,OAQAC,EAA0B,SAAC,GAAY,IAAXb,EAAU,EAAVA,KAC/Bc,EAAUT,IAChB,OACI,cAACU,EAAA,EAAD,CAAMC,UAAWF,EAAQP,KAAzB,SACA,eAACU,EAAA,EAAD,WACGjB,GAAQ,cAACkB,EAAA,EAAD,CAAYC,QAAQ,KAAKC,UAAU,KAAnC,SACNpB,EAAKC,OAER,cAACiB,EAAA,EAAD,CAAYG,MAAM,gBAAlB,SACGrB,EAAI,UAAMA,EAAKI,YAAX,gBAAsC,2CCvBvD,SAASkB,EAAUC,GACjB,OAAsB,IAAlBA,EAAOC,OACF,CAACD,EAAO,GAAIA,EAAO,IAEnBA,EAAOE,IAAIH,GAItB,SAASI,EAAexB,GACtB,IAAIyB,EAAiBC,EAAS,SAAaC,MAAK,SAAAC,GAAC,OAAIA,EAAC,WAAD,SAA8B5B,KAEnF,OAAIyB,EAC8BA,EAAc,SAAd,YACCF,IAAIH,GAGhC,GAkDMS,MAlCf,WACE,IAAMC,EAAgB,CAAEX,MAAO,SAAUY,UAAW,UACpD,EAA0CC,mBAAwB,MAAlE,mBAAOC,EAAP,KAAsBC,EAAtB,KACA,EAAgCF,mBAAsB,MAAtD,mBAAOG,EAAP,KAAiBC,EAAjB,KAMA,OAJAC,qBAAU,WACRH,EAlBYpC,EAAKyB,KAAI,SAACe,GACtB,OAAO,2BACFA,GADL,IAEEC,YAAaf,EAAec,EAAQtC,YAgBrC,IAGD,eAACwC,EAAA,EAAD,CAAcC,MAAO,CAAEC,MAAO,QAASC,OAAQ,SAAWC,OAAQ,CAAC,GAAI,GAAIC,KAAM,EAAjF,UACE,cAACC,EAAA,EAAD,CACEC,GAAG,MACHC,YAAY,yEACZC,IAAG,kHAA6GC,8FAGlH,cAAC,EAAD,CAASpD,KAAMqC,IAEdF,GAAiBA,EAAcV,KAAI,SAAAzB,GAAI,aACtC,cAACqD,EAAA,EAAD,CACEC,YAAatB,EACbuB,UAAS,UAAEvD,EAAKyC,mBAAP,QAAsB,GAC/Be,cAAe,CACbC,UAAW,WAAOnB,EAAYtC,IAC9B0D,SAAU,WAAOpB,EAAY,iBCjD1BqB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.5c0ad8fe.chunk.js","sourcesContent":["export interface Data {\n  Name: string,\n  Id: string,\n  Samples: number,\n  Assignments: number,\n  coordinates?: any[]\n}\n\nexport const data: Data[] = [\n  {\n    Name: \"United States of America\",\n    Id: \"USA\",\n    Samples: 50,\n    Assignments: 4,\n  },\n  {\n    Name: \"Norway\",\n    Id: \"NOR\",\n    Samples: 500,\n    Assignments: 40,\n  },\n  {\n    Name: \"Thailand\",\n    Id: \"THA\",\n    Samples: 3,\n    Assignments: 1,\n  },\n  {\n    Name: \"Egypt\",\n    Id: \"EGY\",\n    Samples: 20,\n    Assignments: 3,\n  },\n];\n","import { makeStyles } from '@material-ui/core/styles';\nimport {Card, CardContent, Typography} from '@material-ui/core/'\nimport React from 'react';\nimport { Data } from './data/data';\n\n\nconst useStyles = makeStyles({\n    root: {\n      minWidth: 300,\n      position: 'absolute',\n      right: 10,\n      top:10,\n      zIndex:1000\n    },\n  });\n\n  interface Props {\n      data: Data | null\n  }\n\nexport const InfoBox:React.FC<Props> = ({data}) => {\n    const classes = useStyles();\n    return (\n        <Card className={classes.root}>\n        <CardContent>\n          {data && <Typography variant=\"h5\" component=\"h2\">\n            {data.Name }\n          </Typography>}\n          <Typography color=\"textSecondary\">\n            {data ? `${data.Assignments} Assignments`: 'hover over country to see values'}\n          </Typography>\n        </CardContent>\n      </Card>\n    )\n}\n","import { useEffect, useState } from 'react';\nimport { MapContainer, TileLayer, Polygon } from 'react-leaflet'\nimport { Data, data } from './data/data';\nimport countries from './data/countries.json'\nimport { InfoBox } from './InfoBox';\n\nfunction swapLatLn(coords: any[]): any[] {\n  if (coords.length === 2) {\n    return [coords[1], coords[0]]\n  } else {\n    return coords.map(swapLatLn)\n  }\n}\n\nfunction getCoordinates(Id: string): any[] {\n  let countryFeature = countries[\"features\"].find(f => f[\"properties\"][\"ISO_A3\"] === Id);\n\n  if (countryFeature) {\n    let countryFeatureCoordinates = countryFeature[\"geometry\"][\"coordinates\"]\n    return countryFeatureCoordinates.map(swapLatLn)\n  }\n\n  return []\n}\n\nconst mapData = (): Data[] => {\n  let newData = data.map((feature: Data) => {\n    return {\n      ...feature,\n      coordinates: getCoordinates(feature.Id)\n    }\n  })\n\n  return newData\n\n}\n\n\nfunction App() {\n  const purpleOptions = { color: 'purple', fillColor: 'purple' }\n  const [processedData, setprocessedData] = useState<Data[] | null>(null)\n  const [selected, setselected] = useState<Data | null>(null)\n\n  useEffect(() => {\n    setprocessedData(mapData())\n  }, [])\n\n  return (\n    <MapContainer style={{ width: '100vw', height: '100vh' }} center={[30, 0]} zoom={3}>\n      <TileLayer\n        id='map'\n        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        url={`https://api.mapbox.com/styles/v1/karimj/cjm203zaw16gb2ro02gfsmt3l/tiles/256/{z}/{x}/{y}@2x?access_token=${process.env.REACT_APP_MAPBOX_ACCESS_TOKEN}`}\n      />\n\n      <InfoBox data={selected} />\n\n      {processedData && processedData.map(data =>\n        <Polygon\n          pathOptions={purpleOptions}\n          positions={data.coordinates ?? []}\n          eventHandlers={{\n            mouseover: () => {setselected(data)},\n            mouseout: () => {setselected(null)}\n          }}\n        />\n      )}\n\n    </MapContainer>\n  );\n}\n\nexport default App;\n\n\n\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'leaflet/dist/leaflet.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}